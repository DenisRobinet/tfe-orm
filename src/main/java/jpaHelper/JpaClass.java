package jpaHelper;

import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Iterator;

import com.hers.robinet.tfe.dbGenerator.SchemaDB;
import com.hers.robinet.tfe.mananger.DbManager;

/**
 * supported annotation:
 * @Table(name="tableName",
 * 		indexes = {@Index(name = "my_index_name",  columnList="iso_code"),
                  @Index(name = "my_index_name2", columnList="name, colum2")})
 */
public class JpaClass{
	
	public static String getIdentifiantNameFromClass(Class<?> type){
		return type.getName();
	}
	

	protected Class<?> type;
	protected String identifiantName;
	protected String name;
	protected ArrayList<JpaIndex> indexes = new ArrayList<JpaIndex>();
	protected ArrayList<JpaRelation> attributes = new ArrayList<JpaRelation>();
	protected ArrayList<JpaRelation> ids = new ArrayList<JpaRelation>();
	protected ArrayList<JpaRelation> fks = new ArrayList<JpaRelation>();
	
	public JpaClass(Class<?> type, SchemaDB schema)
	{
		this.type = type;

		name = null;
		for (Annotation annotation : type.getAnnotations())
			if(annotation instanceof javax.persistence.Table){
				name = ((javax.persistence.Table) annotation).name();
				if (name =="")
					name=null;
				for (javax.persistence.Index index : ((javax.persistence.Table) annotation).indexes()) {
					indexes.add(new JpaIndex(index));
				}
			}
				
		if(name == null)
			name = type.getSimpleName();
		identifiantName = getIdentifiantNameFromClass(type);
		
		int generatedValueCount = 0;
		for (Field attribute : type.getDeclaredFields()) {
			JpaRelation temp = JpaRelation.getAttribute(attribute, this, schema);
			
			if (temp != null)
			{
				if(temp.isAutoGenerated()){
					++generatedValueCount;
					if(generatedValueCount>1)
						throw new ModelException("A table can only have one @GeneretedValue");
				}
				
				if(temp.isId() && !temp.isAbstract)
				{
					ids.add(temp);
				}
				
				if(temp.getRelationType() != DbManager.noRelation)
				{
					fks.add(temp);
				}
				
				attributes.add(temp);
			}
		}
	}
	
	public JpaClass(JpaClass table1, JpaClass table2)
	{
		identifiantName = "FILL_"+table1.getIdentifiantName()+"_"+table2.getIdentifiantName();
		name="FILL_"+table1.getName()+"_"+table2.getName();
		

		JpaRelationManyToOne att1 = new JpaRelationManyToOne(table1);
		JpaRelationManyToOne att2 = new JpaRelationManyToOne(table2);
		attributes.add(att1);
		attributes.add(att2);
		ids = attributes;
		fks = attributes;
		
	}
	
	public Class<?> getType() {
		return type;
	}

	public String getName() {
		return name;
	}

	public ArrayList<JpaIndex> getIndexes() {
		return indexes;
	}

	public ArrayList<JpaRelation> getAttributes() {
		return attributes;
	}

	public ArrayList<JpaRelation> getIds() {
		return ids;
	}

	public ArrayList<JpaRelation> getFks() {
		return fks;
	}

	public String getIdentifiantName() {
		return identifiantName;
	}
}
