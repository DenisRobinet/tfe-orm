package jpaHelper;

import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Iterator;

import com.hers.robinet.tfe.dbGenerator.SchemaDB;
import com.hers.robinet.tfe.mananger.DbManager;

/**
 * Represent a attribute.
 * Supported annotation:
 * 	@column name, nullable, unique
 *  @id
 *  @GeneretedValue (on Integer, unique for the table. Id can be ommited for this attribute)
 *  @OneToOne, @OneToMany, @ManyToOne, @ManyToMany
 *  @Transient
 */
public abstract class JpaRelation {

	protected ArrayList<Field> attribute = new ArrayList<Field>();
	protected ArrayList<String> name = new ArrayList<String>();
	protected ArrayList<Class<?>> type = new ArrayList<Class<?>>();
	protected boolean isAutoGenerated = false;
	protected boolean isId = false;
	protected boolean isnullable = false;
	protected boolean isUnique = false;
	protected boolean isAbstract = false;
	protected int relationType = DbManager.noRelation;
	
	
	public static JpaRelation getAttribute(Field attribute, JpaClass tableClass, SchemaDB schema)
	{
		int relationType = DbManager.noRelation;
		for (Annotation annotation : attribute.getAnnotations()){
			if (annotation instanceof javax.persistence.Transient)
			{
				return null;
			}
			
			if (!DbManager.isPrimaryType(attribute.getType()))
			{
				if (annotation instanceof javax.persistence.OneToOne){
					relationType = DbManager.OneToOne;
				}
				else if (annotation instanceof javax.persistence.ManyToOne){
					relationType = DbManager.ManyToOne;
				}
				else if (annotation instanceof javax.persistence.OneToMany){
					relationType = DbManager.OneToMany;
				}
				else if (annotation instanceof javax.persistence.ManyToMany){
					relationType = DbManager.ManyToMany;
				}
				else{
					throw new ModelException("A class which is not a primitive type(cf:doc) should have a relation");
				}
			}
		}
		
		if(relationType == DbManager.noRelation){
			return new JpaAttribute(attribute);
		}
		else if(relationType == DbManager.OneToOne){
			return new JpaRelationOneToOne(attribute, schema);
		}
		else if(relationType == DbManager.ManyToOne){
			return new JpaRelationManyToOne(attribute, schema);
		}
		else if(relationType == DbManager.OneToMany)
		{
			return new JpaRelationOneToMany(attribute, schema);
		}
		else if(relationType == DbManager.ManyToMany){
			return new JpaRelationManyToMany(attribute, schema, tableClass);
		}
		return null;
	}
	
	
	
	
	public ArrayList<Field> getAttribute() {
		return attribute;
	}

	public ArrayList<String> getName() {
		return name;
	}
	
	public ArrayList<Class<?>> getType() {
		return type;
	}

	public int getRelationType() {
		return relationType;
	}
	
	public boolean isAutoGenerated() {
		return isAutoGenerated;
	}

	public boolean isId() {
		return isId;
	}

	public boolean isIsnullable() {
		return isnullable;
	}

	public boolean isUnique() {
		return isUnique;
	}
	
	public boolean isAbstract()
	{
		return isAbstract;
	}
}
