package com.hers.robinet.tfe.dialect;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

import com.hers.robinet.tfe.mananger.InfoConnection;

import jpaHelper.JpaClass;
import jpaHelper.JpaRelation;

public abstract class Dialect{

	private static final String kw_CreateTable = "CREATE TABLE";
	private static final String kw_AutoIncrement = "AUTO_INCREMENT";
	private static final String kw_PrimaryKey = "PRIMARY KEY";
	private static final String kw_ForeignKey = "FOREIGN KEY";
	private static final String kw_ReferencesFK = "REFERENCES";
	
	public Connection getConnection(InfoConnection info) throws SQLException, ClassNotFoundException{
		Class.forName(info.getDriver());
		return DriverManager.getConnection(info.getUrl()+info.getDatabase(),info.getUser(),info.getPassword());
	}
	
	public abstract String typeOf(Class<?> type);
	
	public abstract boolean databaseEmpty(Connection connection, InfoConnection info) throws SQLException;


	public void compile(JpaClass table, StringBuilder build) {
		build.append(kw_CreateTable);
		build.append(" ");
		build.append(table.getName());
		build.append(" (\n\t");
		
		printColumDeclaration(build, table.getAttributes().get(0));
		for(int i=1;i<table.getAttributes().size();++i){
			build.append(",\n\t");
			printColumDeclaration(build, table.getAttributes().get(i));
		}
		//TODO find a way to iterate
		if(table.getIds().size()>0)
		{
			build.append(",\n\t");
			build.append(kw_PrimaryKey);
			build.append(" (");
			
			printName(build, table.getIds().get(0));
			
			for (int i=1; i<table.getIds().size();++i) {
				build.append(" ,");
				printName(build, table.getIds().get(i));
			}
			build.append(")");
		}

		/*
		for (JpaRelation fk : table.getFks()) {
			build.append(",\n\t");
			build.append(kw_ForeignKey);
			build.append(" (");
			
			build.append(fk.getCols().get(0).getName());
			for (int i=1;i<fk.getCols().size();++i) {
				build.append(", ");
				build.append(fk.getCols().get(i).getName());
			}
			
			build.append(") ");
			build.append(kw_References);
			build.append(" ");
			build.append(fk.getTable().getName());
			build.append("(");
			build.append(fk.getRef().get(0).getName());
			for (int i=1;i<fk.getCols().size();++i) {
				build.append(", ");
				build.append(fk.getRef().get(i).getName());
			}
			
			build.append(")");
		}*/
		build.append("\n)");
	}
	
	private void printColumDeclaration(StringBuilder build, JpaRelation relation)
	{
		build.append(relation.getName().get(0));
		build.append(" ");
		
		build.append(typeOf(relation.getType().get(0)));
		
		if(relation.isAutoGenerated())
		{
			build.append(" ");
			build.append(kw_AutoIncrement);
		}
		
		for(int i=1;i<relation.getName().size();++i)
		{
			build.append(",\n\t");
			build.append(relation.getName().get(i));
			build.append(" ");
			
			build.append(typeOf(relation.getType().get(i)));
			//Cannot be autoIncrement if the relation is composed
		}
	}
	
	private void printName(StringBuilder build, JpaRelation relation)
	{

		build.append(relation.getName().get(0));
		
		for (int i=1; i<relation.getName().size();++i) {
			build.append(" ,");
			build.append(relation.getName().get(i));
		}
	}
}
