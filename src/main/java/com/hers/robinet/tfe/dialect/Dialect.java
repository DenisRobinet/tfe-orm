package com.hers.robinet.tfe.dialect;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

import com.hers.robinet.tfe.jpaHelper.JpaClass;
import com.hers.robinet.tfe.jpaHelper.JpaRelation;
import com.hers.robinet.tfe.jpaHelper.JpaType;
import com.hers.robinet.tfe.mananger.InfoConnection;

public abstract class Dialect{

	private static final String kw_CreateTable = "CREATE TABLE";
	private static final String kw_AutoIncrement = "AUTO_INCREMENT";
	private static final String kw_PrimaryKey = "PRIMARY KEY";
	private static final String kw_ForeignKey = "FOREIGN KEY";
	private static final String kw_ReferencesFK = "REFERENCES";
	
	public Connection getConnection(InfoConnection info) throws SQLException, ClassNotFoundException{
		Class.forName(info.getDriver());
		return DriverManager.getConnection(info.getUrl()+info.getDatabase(),info.getUser(),info.getPassword());
	}
	
	public abstract String typeOf(Class<?> type);
	
	public abstract boolean databaseEmpty(Connection connection, InfoConnection info) throws SQLException;


	public void compile(JpaClass table, StringBuilder build) {
		build.append(kw_CreateTable);
		build.append(" ");
		build.append(table.getName());
		build.append(" (\n\t");
		
		JpaRelation.JpaRelationIterator it = new JpaRelation.JpaRelationIterator(table.getAttributes());
		JpaType type = it.next();
		
		build.append(type.getName());
		build.append(" ");
		
		build.append(typeOf(type.getType()));
		if(it.getCurrentRelation().isAutoGenerated())
		{
			build.append(" ");
			build.append(kw_AutoIncrement);
		}
		
		while(it.hasNext())
		{
			type = it.next();
			build.append(",\n\t");
			build.append(type.getName());
			build.append(" ");
			
			build.append(typeOf(type.getType()));
			if(it.getCurrentRelation().isAutoGenerated())
			{
				build.append(" ");
				build.append(kw_AutoIncrement);
			}
		}

		it = new JpaRelation.JpaRelationIterator(table.getIds());
		if(it.hasNext())
		{
			build.append(",\n\t");
			build.append(kw_PrimaryKey);
			build.append(" (");
			
			type = it.next();
			build.append(type.getName());
			
			while (it.hasNext()) {
				build.append(", ");
				type = it.next();
				build.append(type.getName());
			}
			build.append(")");
		}
		
		for (JpaRelation rel : table.getFks()) {
			if(!rel.isAbstract())
			{
				build.append(",\n\t");
				build.append(kw_ForeignKey);
				build.append(" (");
				
				build.append(rel.getTypeStruct().get(0).getName());
				for (int i=1;i<rel.getTypeStruct().size();++i) {
					build.append(", ");
					build.append(rel.getTypeStruct().get(i).getName());
				}

				build.append(") ");
				build.append(kw_ReferencesFK);
				build.append(" ");
				build.append(rel.getReferencedTable().getName());
				build.append("(");
				
	
				it = new JpaRelation.JpaRelationIterator(rel.getReferencedTable().getIds());
				if(it.hasNext())
				{
					type = it.next();
					build.append(type.getName());
					
					while (it.hasNext()) {
						build.append(", ");
						type = it.next();
						build.append(type.getName());
					}
					build.append(")");
				}
			}
		}

		build.append("\n)");
	}
}
